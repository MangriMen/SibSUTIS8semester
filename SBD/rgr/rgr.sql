DROP TABLE BANKS CASCADE CONSTRAINTS;
DROP TABLE LENDINGS CASCADE CONSTRAINTS;

CREATE TABLE BANKS
(
  ID   NUMBER,
  NAME VARCHAR(40) NOT NULL,
  CONSTRAINT banks_pk PRIMARY KEY (ID)
);

CREATE TABLE LENDINGS
(
  ID NUMBER,
  TYPE VARCHAR(100) NOT NULL,
  BANK_ID NUMBER,
  CONSTRAINT lendings_pk PRIMARY KEY (ID),
  CONSTRAINT lendings_fk FOREIGN KEY (BANK_ID) REFERENCES BANKS(ID)
);


DROP SEQUENCE BANKS_SEQUENCE;
DROP SEQUENCE LENDINGS_SEQUENCE;

CREATE SEQUENCE BANKS_SEQUENCE
    NOCACHE
    START WITH 1;
CREATE SEQUENCE LENDINGS_SEQUENCE
    NOCACHE
    START WITH 1;

CREATE OR REPLACE PACKAGE rgr_package1 IS
    PROCEDURE fill_tables;
    PROCEDURE clear_tables;
END rgr_package1;
/

CREATE OR replace PACKAGE BODY rgr_package1
IS
  PROCEDURE fill_tables
  IS
  BEGIN
    INSERT INTO BANKS VALUES(BANKS_SEQUENCE.NEXTVAL, 'Сбербанк');
    INSERT INTO BANKS VALUES(BANKS_SEQUENCE.NEXTVAL, 'Альфа');
    INSERT INTO BANKS VALUES(BANKS_SEQUENCE.NEXTVAL, 'ВТБ');
    INSERT INTO BANKS VALUES(BANKS_SEQUENCE.NEXTVAL, 'Тинькофф');
    INSERT INTO BANKS VALUES(BANKS_SEQUENCE.NEXTVAL, 'Левобережный');
    INSERT INTO BANKS VALUES(BANKS_SEQUENCE.NEXTVAL, 'Совкомбанк');
    INSERT INTO BANKS VALUES(BANKS_SEQUENCE.NEXTVAL, 'Открытие');

    INSERT INTO LENDINGS VALUES(LENDINGS_SEQUENCE.NEXTVAL, 'Ипотека', BANKS_SEQUENCE.CURRVAL - 6);
    INSERT INTO LENDINGS VALUES(LENDINGS_SEQUENCE.NEXTVAL, 'Потребительский беззалоговый кредит', BANKS_SEQUENCE.CURRVAL - 5);
    INSERT INTO LENDINGS VALUES(LENDINGS_SEQUENCE.NEXTVAL, 'Потребительский залоговый кредит', BANKS_SEQUENCE.CURRVAL - 4);
    INSERT INTO LENDINGS VALUES(LENDINGS_SEQUENCE.NEXTVAL, 'Кредитная карта', BANKS_SEQUENCE.CURRVAL - 3);
    INSERT INTO LENDINGS VALUES(LENDINGS_SEQUENCE.NEXTVAL, 'Микрозайм', BANKS_SEQUENCE.CURRVAL - 2);
    INSERT INTO LENDINGS VALUES(LENDINGS_SEQUENCE.NEXTVAL, 'Рефинансирование', BANKS_SEQUENCE.CURRVAL - 1);
    INSERT INTO LENDINGS VALUES(LENDINGS_SEQUENCE.NEXTVAL, 'Международный', BANKS_SEQUENCE.CURRVAL);
    COMMIT;
  END fill_tables;

  PROCEDURE clear_tables
  IS
  BEGIN
    DELETE FROM lendings;
    DELETE FROM banks;
    COMMIT;
  END clear_tables;
END rgr_package1;
/

ALTER SESSION SET TIME_ZONE = '+7:0';

CREATE OR REPLACE TRIGGER LENDINGS_WORKING_TIME_TRIGGER
AFTER INSERT ON LENDINGS
FOR EACH ROW
DECLARE
    CURRENT_HOUR NUMERIC(4);
BEGIN
    SELECT EXTRACT (HOUR FROM LOCALTIMESTAMP) INTO CURRENT_HOUR FROM DUAL;
    IF CURRENT_HOUR <= 8 AND CURRENT_HOUR >= 0 OR CURRENT_HOUR >= 18 AND CURRENT_HOUR <= 24 THEN
        raise_application_error(-20001, 'Attempting to add an entry outside business hours');
    END IF;
END;
/

CREATE OR replace VIEW BANKS_VIEW AS
    SELECT NAME AS Название, TYPE AS "Тип кредитования" FROM BANKS, LENDINGS
    WHERE BANKS.ID = LENDINGS.BANK_ID AND TYPE != 'Микрозайм';


CREATE OR replace PACKAGE rgr_package2 IS
    PROCEDURE tables_fill;
    PROCEDURE tables_clear;
    PROCEDURE add_lending_to_bank(BANK_NAME IN VARCHAR2, LENDING_TYPE IN VARCHAR2);
    PROCEDURE get_lendings_count_except(BANK_NAME IN VARCHAR2);
END rgr_package2;
/

CREATE OR replace PACKAGE BODY rgr_package2 IS
    bank_id NUMBER;
    lending_exists NUMBER;

    CURSOR cur(BANK_NAME VARCHAR2) IS
    SELECT NAME AS Название, Count(TYPE) AS "Количество видов кредитования" FROM BANKS, LENDINGS WHERE BANKS.ID = LENDINGS.BANK_ID AND BANKS.NAME <> BANK_NAME GROUP BY BANKS.NAME;

    PROCEDURE tables_fill
    IS
    BEGIN
        rgr_package1.fill_tables;
    END tables_fill;

    PROCEDURE tables_clear
    IS
    BEGIN
        rgr_package1.clear_tables;
    END tables_clear;

    PROCEDURE add_lending_to_bank(BANK_NAME IN VARCHAR2, LENDING_TYPE IN VARCHAR2)
    IS
    BEGIN
        SELECT ID INTO bank_id FROM banks WHERE banks.name = BANK_NAME;
        
        SELECT Count(ID) INTO lending_exists FROM lendings WHERE lendings.type = LENDING_TYPE AND lendings.bank_id = bank_id;

        IF lending_exists = 0 THEN
            INSERT INTO LENDINGS(ID, TYPE, BANK_ID) VALUES(LENDINGS_SEQUENCE.NEXTVAL, LENDING_TYPE, bank_id);
        END IF;
    END add_lending_to_bank;

    PROCEDURE get_lendings_count_except(BANK_NAME IN VARCHAR2)
    IS
    BEGIN
        FOR rec IN cur(BANK_NAME)
        LOOP
            DBMS_OUTPUT.PUT_LINE(rec.Название || ': ' || rec."Количество видов кредитования");
        END LOOP;
    END get_lendings_count_except;

END rgr_package2;
/

GRANT SELECT ON BANKS_VIEW TO PUBLIC;
GRANT EXECUTE ON rgr_package2 TO PUBLIC;